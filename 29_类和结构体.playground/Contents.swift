//: Playground - noun: a place where people can play

import UIKit

//1.定义结构体和类
struct 武器{
    var 名称 = ""
    var 命中 = 0.0
    var 扣血 = 0
}

class 主角 {
    var 姓名 = ""
    var 血量 = 0
    var 职业 = ""
    var 佩刀 = 武器()
}

//2.创建结构体对象和类对象
let 青龙刀 = 武器(名称: "青龙刀", 命中: 0.9, 扣血: 800)//结构体都是值类型
let 关小羽 = 主角()//类都是引用类型
//3.为类设置相关属性
关小羽.姓名 = "关小羽"
关小羽.血量 = 8000
关小羽.职业 = "将军"
关小羽.佩刀 = 青龙刀

//4.结构体是值类型，就是简单的值复制，复制品变化了，原始数据不变
关小羽.佩刀.扣血 = 10000
println(青龙刀.扣血)
println(关小羽.佩刀.扣血)

//5.类是引用类型，任何变化都会引起原始的变化
let 变装关小羽 = 关小羽
变装关小羽.血量 = 1000
println(变装关小羽.血量)
println(关小羽.血量)

//6.lazy加载类，惰性加载类，使用时才初始化，对性能有帮助
class 地图类{
    var 文件名 = "死亡沙漠.map"
}

class 角色类{
    lazy var 打怪地图 = 地图类()       //惰性创建对象
    var 上线 = true
}

let 法师 = 角色类()
法师.打怪地图                         //使用时才创建实际对象

//7.get,set
struct 坐标{
    var x = 0, y = 0
}
struct 步伐 {
    var walk = 0, run = 0
}

struct 人物斜上移动 {
    var 初步坐标 = 坐标()
    var 人物步伐 = 步伐()
    
    var 走坐标: 坐标{
        get{
            let newX = 初步坐标.x + 人物步伐.walk
            let newY = 初步坐标.y + 人物步伐.walk
            
            return 坐标(x: newX, y: newY)
        }
        set{
            初步坐标.x = newValue.x - 人物步伐.walk
            初步坐标.y = newValue.y - 人物步伐.walk
        }
    }
}
var 某次移动 = 人物斜上移动(初步坐标: 坐标(), 人物步伐: 步伐(walk: 10, run: 20))

某次移动.走坐标
某次移动.走坐标 = 坐标(x: 30, y: 30)
某次移动.初步坐标

struct 战士 {
    var 武器攻击力 = 0, 头盔攻击力 = 0, 戒指攻击力 = 0, 盔甲攻击力 = 0
    var 经验倍数 = 1
    var 总攻击力 : Int{
        return 经验倍数 * (武器攻击力 + 头盔攻击力 + 戒指攻击力 + 盔甲攻击力)
    }
}
let 发思特战士 = 战士(武器攻击力: 30, 头盔攻击力: 2, 戒指攻击力: 4, 盔甲攻击力: 10, 经验倍数: 3)
发思特战士.总攻击力

//8.属性监视器
class 经验计算{
    var 总经验 : Int = 0{
        willSet{
            println("当前经验是：\(newValue)")
        }
        didSet{
            println("增加\(总经验 - oldValue)")
        }
    }
}
var MU游戏经验计算 = 经验计算()
MU游戏经验计算.总经验 = 1000
MU游戏经验计算.总经验 = 1200
MU游戏经验计算.总经验 = 2000

//9.静态属性
struct 背包{
    static let 最大负载 = 300
    var 物品列表 : [String]
}
背包.最大负载
var 华仔的背包 = 背包(物品列表: ["金创药","魔法药"])


//10.方法
enum 怪物经验对应列表:Int{
    case 骷髅兵 = 10, 毒虫 = 20, 独眼巨人 = 30, 幽灵 = 40, 骷髅弓箭手 = 50, 地狱猎犬怪 = 60, 地狱蜘蛛 = 70, 骷髅战士 = 80, 死灵法师 = 90, 毒牛怪 = 100, 暗黑骑士 = 200, 魔鬼戈登 = 500
}

struct 服务器经验倍数 {
    var 开启 = false
    var 倍数 = 0
}

class 人民币玩家{
    var 经验值 = 0
    var 服倍数 = 服务器经验倍数()
    
    func 挂机经验(){
        经验值 += 200
    }
    
    func 打怪经验(#怪物经验值: Int, 经验倍数: Int){
        经验值 += (怪物经验值 * 经验倍数)
        
        if(服倍数.开启 && 服倍数.倍数 > 1){
            经验值 *= self.服倍数.倍数
        }
        
    }
    
}

var 人民币法师 = 人民币玩家()
人民币法师.挂机经验()
人民币法师.打怪经验(怪物经验值: 怪物经验对应列表.暗黑骑士.rawValue, 经验倍数: 3)
人民币法师.服倍数.开启 = true
人民币法师.服倍数.倍数 = 2
人民币法师.打怪经验(怪物经验值: 怪物经验对应列表.魔鬼戈登.rawValue, 经验倍数: 3)


//11.结构体的方法是不能更改结构体的属性，可以使用2种方法，突边函数和直接初始化结构体：
struct 角色坐标 {
    var x = 0, y = 0
    //1.已变异方法实现（结构体对象可以操作方法了）
    mutating func 安全区坐标(横坐标:Int,纵坐标:Int){
        self.x = 横坐标
        self.y = 纵坐标
    }
    //2.直接返回新结构体实现
//    func 安全区坐标(横坐标:Int,纵坐标:Int){
//        self = 角色坐标(x: 横坐标, y: 纵坐标)
//    }
    
}

//swift方法的第1个参数默认不给参数名，从第2个参数开始默认给参数名
var 某坐标 = 角色坐标(x: 0, y: 0)
某坐标.安全区坐标(500, 纵坐标: 500)

//12.结构体的静态方法和类的init初始化方法（构造函数）和类的静态方法
struct 复活{
    static var hp = 0
    static func 复活点(#当前区域:String)->String{
        return 当前区域 + "安全区"
    }
}
class 玩家{
    var 姓名 = ""
    var HP = 0
    var 当前所在地图 = ""
    
    init(姓名: String, HP: Int, 当前所在地图:String){
        self.姓名 = 姓名
        self.HP = HP
        self.当前所在地图 = 当前所在地图
    }
    //类的静态方法
    class func 服务器名() ->String{
        return "珠海电信一区"
    }
    
    func 复活回安全区(){
        if HP == 0{
            println("您在\(复活.复活点(当前区域: 当前所在地图))复活！")
        }
    }
}

//调用类的静态放大
玩家.服务器名()

let 黄cc = 玩家(姓名: "黄cc", HP: 200, 当前所在地图: "阿特兰蒂斯")
黄cc.当前所在地图 = "死亡沙漠"
黄cc.HP = 0
黄cc.复活回安全区()












































